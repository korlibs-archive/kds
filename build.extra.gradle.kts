
operator fun File.get(path: String) = File(this,path)

val srcDir = rootProject.rootDir["template"]
val dstDir = rootProject.rootDir["kds"]

tasks {
    val generate by registering {
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenArrayList.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/ArrayList.kt"],
            includeFloat = true
        )
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenDeque.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/Deque.kt"],
            includeFloat = true,
            includeGeneric = true,
            includeByte = true
        )
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenArray2.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/Array2.kt"],
            includeFloat = true,
            includeGeneric = true
        )
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenPriorityQueue.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/PriorityQueue.kt"],
            includeFloat = true,
            includeGeneric = true
        )
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenStack.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/Stack.kt"],
            includeFloat = true,
            includeGeneric = true
        )
        synchronize(
            srcDir["src/main/kotlin/com/soywiz/kds/TGenQueue.kt"],
            dstDir["src/commonMain/kotlin/com/soywiz/kds/Queue.kt"],
            includeFloat = true,
            includeGeneric = true
        )
        //synchronize(
        //    File("template/src/main/kotlin/com/soywiz/kds/TGenLinkedList.kt"),
        //    File("src/commonMain/kotlin/com/soywiz/kds/LinkedList.kt"),
        //    includeFloat = true,
        //    includeGeneric = true
        //)
    }
}

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

fun synchronize(src: File, dst: File, includeFloat: Boolean = true, includeGeneric: Boolean = false, includeByte: Boolean = false) {
    val content = src.readText()
    val parts = content.split("// GENERIC\n")
    val head = parts[0].trim()
    val generic = parts.getOrElse(1) { "" }

    val types = listOf("Int", "Double") + (if (includeFloat) listOf("Float") else listOf()) + (if (includeByte) listOf("Byte") else listOf())

    dst.writeText(
        ("$head\n\n// AUTOGENERATED: DO NOT MODIFY MANUALLY!\n\n" + (if (includeGeneric) "$generic\n\n" else "") + types.map { "// $it\n" + generic.replaceTemplate(it) }.joinToString("\n\n"))
            .restoreCollectionKinds()
    )
}

fun String.restoreCollectionKinds(): String = this
    .restoreCollectionKinds("Byte")
    .restoreCollectionKinds("Int")
    .restoreCollectionKinds("Float")
    .restoreCollectionKinds("Double")

fun String.restoreCollectionKinds(kind: String): String {
    return this.replace("${kind}List", "List<$kind>")

        .replace("${kind}MutableIterator", "MutableIterator<$kind>")
        .replace("${kind}MutableCollection", "MutableCollection<$kind>")

        .replace("${kind}Iterable", "Iterable<$kind>")
        .replace("${kind}Iterator", "Iterator<$kind>")
        .replace("${kind}Collection", "Collection<$kind>")

        .replace("${kind}Comparable", "Comparable<$kind>")
        .replace("${kind}Comparator", "Comparator<$kind>")
}

fun String.replaceTemplate(kind: String): String {
    val lkind = kind.toLowerCase()
    return this
        .replace("arrayOfNulls<Any>", "${kind}Array")
        .replace("arrayOfNulls<TGen>", "${kind}Array")
        .replace("<reified TGen>", "")
        .replace("<TGen : Any>", "")
        .replace("<*/*_TGen_*/>", "")
        .replace("<reified TGen : Comparable<TGen>>", "")
        .replace("<TGen : Comparable<TGen>>", "")
        .replace("Iterable<TGen>", "Iterable<$kind>")
        .replace("Collection<TGen>", "Collection<$kind>")
        .replace("fun <TGen>", "fun")
        .replace("arrayListOf<TGen>", "${lkind}ArrayListOf")
        //.replace("List<TGen>", "${kind}ArrayList")
        .replace("Array<TGen>", "${kind}Array")
        .replace("Array<Any>", "${kind}Array")
        .replace("Array<out TGen>", "${kind}Array")
        .replace(Regex("""(\w+)<TGen>""")) {
            val base = it.groupValues[1]
            val name = base.replace("TGen", "")
            when (base) {
                "Iterator" -> "Iterator<$kind>"
                "ListIterator" -> "ListIterator<$kind>"
                else -> "$kind$name"
            }
        }
        .replace(Regex("""(\w+)<\*/\*TGen\*/>""")) {
            val base = it.groupValues[1]
            val name = base.replace("TGen", "")
            when (base) {
                "Iterator" -> "Iterator<$kind>"
                "ListIterator" -> "ListIterator<$kind>"
                else -> "$kind$name"
            }
        }
        .replace(": TGen", ": $kind")
        .replace("-> TGen", "-> $kind")
        .replace("as TGen", "as $kind")
        .replace("(TGen)", "($kind)")
        .replace("TGen, ", "$kind, ")
        .replace("TGen", kind)
        .replace("tgen", lkind)

}

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
